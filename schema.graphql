enum TransactionType {
  mint
  burn
}

type Transaction @entity {
  id: ID!
  timestamp: BigInt
  asset: String!
  type: TransactionType!
  amount: BigInt!
  feeRate: BigInt!
  integrator: Bytes
  transactionTo: Bytes
  burnRecipient: Bytes
  destination: Bytes
}

type Darknode @entity {
  id: ID!
  operator: Bytes!
  bond: BigInt!
  publicKey: Bytes!
  registeredAt: BigInt!
  deregisteredAt: BigInt!

  lastClaimedEpoch: BigInt
  previousLastClaimedEpoch: BigInt

  balanceBTC: BigInt!
  balanceZEC: BigInt!
  balanceBCH: BigInt!
}

type Epoch @entity {
  id: ID!
  epochhash: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
  nextEpochBlockNumber: BigInt!
  
  minimumBond: BigInt!
  minimumEpochInterval: BigInt!

  numberOfDarknodes: BigInt!
  numberOfDarknodesLastEpoch: BigInt!
  rewardShareBTC: BigInt!
  rewardShareZEC: BigInt!
  rewardShareBCH: BigInt!

  totalRewardShareBTC: BigInt!
  totalRewardShareZEC: BigInt!
  totalRewardShareBCH: BigInt!
}

# Data accumulated and condensed into day stats
type RenVM @entity {
  id: ID! # fixed to '1'

  # The most recent Ethereum block in which RenVM had activity.
  activeBlock: BigInt!
  activeTimestamp: BigInt!
  previousActiveBlock: BigInt!
  previousActiveTimestamp: BigInt!

  numberOfDarknodes: BigInt!
  numberOfDarknodesLastEpoch: BigInt!
  numberOfDarknodesNextEpoch: BigInt!

  minimumBond: BigInt!

  # Epochs
  minimumEpochInterval: BigInt!
  currentEpoch: Epoch
  previousEpoch: Epoch
  deregistrationInterval: BigInt!

  # Fees
  btcMintFee: Int!
  btcBurnFee: Int!
  zecMintFee: Int!
  zecBurnFee: Int!
  bchMintFee: Int!
  bchBurnFee: Int!

  # Cycles
  currentCycle: BigInt!
  previousCycle: BigInt!
  currentCyclePayoutPercent: BigInt!
  cycleStartTime: BigInt!


  totalTxCountBTC: BigInt!
  totalLockedBTC: BigInt!
  totalVolumeBTC: BigInt!

  totalTxCountZEC: BigInt!
  totalLockedZEC: BigInt!
  totalVolumeZEC: BigInt!

  totalTxCountBCH: BigInt!
  totalLockedBCH: BigInt!
  totalVolumeBCH: BigInt!
}

# Data accumulated and condensed into day stats
type Integrator @entity {
  id: ID!
  date: Int!

  contractAddress: Bytes!

  txCountBTC: BigInt!
  lockedBTC: BigInt!
  volumeBTC: BigInt!

  txCountZEC: BigInt!
  lockedZEC: BigInt!
  volumeZEC: BigInt!

  txCountBCH: BigInt!
  lockedBCH: BigInt!
  volumeBCH: BigInt!
}

type IntegratorContract @entity {
  id: ID!
  date: Int!

  contractAddress: Bytes!

  txCountBTC: BigInt!
  lockedBTC: BigInt!
  volumeBTC: BigInt!

  txCountZEC: BigInt!
  lockedZEC: BigInt!
  volumeZEC: BigInt!

  txCountBCH: BigInt!
  lockedBCH: BigInt!
  volumeBCH: BigInt!
}
