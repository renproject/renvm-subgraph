// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Transaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Transaction entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Transaction entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Transaction", id.toString(), this);
  }

  static load(id: string): Transaction | null {
    return store.get("Transaction", id) as Transaction | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _createdTimestamp(): BigInt | null {
    let value = this.get("_createdTimestamp");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _createdTimestamp(value: BigInt | null) {
    if (value === null) {
      this.unset("_createdTimestamp");
    } else {
      this.set("_createdTimestamp", Value.fromBigInt(value as BigInt));
    }
  }

  get _asset(): string {
    let value = this.get("_asset");
    return value.toString();
  }

  set _asset(value: string) {
    this.set("_asset", Value.fromString(value));
  }

  get _type(): string {
    let value = this.get("_type");
    return value.toString();
  }

  set _type(value: string) {
    this.set("_type", Value.fromString(value));
  }

  get _amount(): BigInt {
    let value = this.get("_amount");
    return value.toBigInt();
  }

  set _amount(value: BigInt) {
    this.set("_amount", Value.fromBigInt(value));
  }

  get _feeRate(): BigInt {
    let value = this.get("_feeRate");
    return value.toBigInt();
  }

  set _feeRate(value: BigInt) {
    this.set("_feeRate", Value.fromBigInt(value));
  }

  get _adapterAddress(): Bytes | null {
    let value = this.get("_adapterAddress");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set _adapterAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("_adapterAddress");
    } else {
      this.set("_adapterAddress", Value.fromBytes(value as Bytes));
    }
  }

  get _destination(): Bytes | null {
    let value = this.get("_destination");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set _destination(value: Bytes | null) {
    if (value === null) {
      this.unset("_destination");
    } else {
      this.set("_destination", Value.fromBytes(value as Bytes));
    }
  }
}

export class Darknode extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Darknode entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Darknode entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Darknode", id.toString(), this);
  }

  static load(id: string): Darknode | null {
    return store.get("Darknode", id) as Darknode | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _operator(): Bytes {
    let value = this.get("_operator");
    return value.toBytes();
  }

  set _operator(value: Bytes) {
    this.set("_operator", Value.fromBytes(value));
  }

  get _isRegistered(): boolean {
    let value = this.get("_isRegistered");
    return value.toBoolean();
  }

  set _isRegistered(value: boolean) {
    this.set("_isRegistered", Value.fromBoolean(value));
  }

  get _registeredTimestamp(): BigInt | null {
    let value = this.get("_registeredTimestamp");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _registeredTimestamp(value: BigInt | null) {
    if (value === null) {
      this.unset("_registeredTimestamp");
    } else {
      this.set("_registeredTimestamp", Value.fromBigInt(value as BigInt));
    }
  }

  get _deregisteredTimestamp(): BigInt | null {
    let value = this.get("_deregisteredTimestamp");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _deregisteredTimestamp(value: BigInt | null) {
    if (value === null) {
      this.unset("_deregisteredTimestamp");
    } else {
      this.set("_deregisteredTimestamp", Value.fromBigInt(value as BigInt));
    }
  }

  get _startBlock(): BigInt | null {
    let value = this.get("_startBlock");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _startBlock(value: BigInt | null) {
    if (value === null) {
      this.unset("_startBlock");
    } else {
      this.set("_startBlock", Value.fromBigInt(value as BigInt));
    }
  }

  get _endBlock(): BigInt | null {
    let value = this.get("_endBlock");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _endBlock(value: BigInt | null) {
    if (value === null) {
      this.unset("_endBlock");
    } else {
      this.set("_endBlock", Value.fromBigInt(value as BigInt));
    }
  }
}

export class Epoch extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Epoch entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Epoch entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Epoch", id.toString(), this);
  }

  static load(id: string): Epoch | null {
    return store.get("Epoch", id) as Epoch | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _createdTimestamp(): BigInt | null {
    let value = this.get("_createdTimestamp");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _createdTimestamp(value: BigInt | null) {
    if (value === null) {
      this.unset("_createdTimestamp");
    } else {
      this.set("_createdTimestamp", Value.fromBigInt(value as BigInt));
    }
  }

  get _blockNumber(): BigInt {
    let value = this.get("_blockNumber");
    return value.toBigInt();
  }

  set _blockNumber(value: BigInt) {
    this.set("_blockNumber", Value.fromBigInt(value));
  }

  get _nextEpochBlockNumber(): BigInt {
    let value = this.get("_nextEpochBlockNumber");
    return value.toBigInt();
  }

  set _nextEpochBlockNumber(value: BigInt) {
    this.set("_nextEpochBlockNumber", Value.fromBigInt(value));
  }
}
